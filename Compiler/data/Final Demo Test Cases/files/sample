class InheritedUtility {
 int member1;
 };

class Utility : InheritedUtility {
 int var1[4][5];
 float var2;
 int findMax(int array[100]);
 };

int Utility::findMax(int array[100]){
 int maxValue;
 int idx;
 maxValue = array[100];
 for( int idx = 99; idx > 0; idx = idx - 1 ){
      if(array[idx] > maxValue) then {
          maxValue = array[idx];}
      else{};
 };
 return (maxValue);
 };

float randomize(){
 float value;
 value = 100 * (2 + 3.0 / 7.0006);
 return (value);
 };

program {
 int sample[100];
 int idx;
 int maxValue;
 int minValue;
 Utility utility;
 for(int t = 0; t<=100 ; t = t + 1) {
    get(sample[t]);
    sample[t] = (sample[t] * randomize());
 };
 maxValue = utility.findMax(sample);
 utility.var1[4][1] = 10;
 put(maxValue);
 };
